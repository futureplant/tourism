opacity = 1.0, fillOpacity = 0.2,
fillColor = "red",
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE), label = ~Buurt) %>%
addMarkers(data=hotels)
m %>% addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addPolygons(data = nbr,color = "#444444", weight = 0.4, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.2,
fillColor = "red",
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE), label = ~Buurt) %>%
addMarkers(data=hotels, popup=~KAM2014)
m %>% addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addPolygons(data = nbr,color = "#444444", weight = 0.4, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.2,
fillColor = "red",
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE), label = ~Buurt) %>%
addMarkers(data=hotels, popup=~KAM2014)
m %>% addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addPolygons(data = nbr,color = "#444444", weight = 0.4, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.2,
fillColor = "red",
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE), label = ~Buurt) %>%
addMarkers(data=hotels, popup=~ï..HOTELNAAM_2014)
?st_join
joined <- st_join(hotels,nbr)
joined
View(joined)
joined <- st_join(nbr,hotels)
joined <- st_join(hotels,nbr)
factors(joined$Buurt_code)
unique(joined$Buurt_code)
class(unique(joined$Buurt_code))
for (i in unique(joined$Buurt_code)){
print(i)
}
for (i in unique(joined$Buurt_code)){
print(class(i))
}
?which
neighbourhood <- "A03d"
localHotels <- joined[which(joined$Buurt_code == neighbourhood)]
joined <- st_join(hotels,nbr)
localHotels <- joined[which(joined$Buurt_code == neighbourhood)]
localHotels <- joined[which(joined$Buurt_code == neighbourhood),]
localHotels
for (neighbourhood in unique(joined$Buurt_code)){
localHotels <- joined[which(joined$Buurt_code == neighbourhood),]
bedCount <- sum(localHotels$BED_2014)
print(paste(neighbourhood,"   ", bedCount))
}
for (neighbourhood in unique(joined$Buurt_code)){
localHotels <- joined[which(joined$Buurt_code == neighbourhood),]
bedCount <- sum(localHotels$BED_2014)
(nbr[which(nbr$Buurt_code) == neighbourhood])$total_beds <- bedCount
}
for (neighbourhood in unique(joined$Buurt_code)){
localHotels <- joined[which(joined$Buurt_code == neighbourhood),]
bedCount <- sum(localHotels$BED_2014)
(nbr[which(nbr$Buurt_code) == neighbourhood,])$total_beds <- bedCount
}
for (neighbourhood in unique(joined$Buurt_code)){
localHotels <- joined[which(joined$Buurt_code == neighbourhood),]
bedCount <- sum(localHotels$BED_2014)
nbr[which(nbr$Buurt_code == neighbourhood),]$total_beds <- bedCount
}
warnings()
View(nbr)
names(nbr)
for (neighbourhood in unique(joined$Buurt_code)){
localHotels <- joined[which(joined$Buurt_code == neighbourhood),]
bedCount <- sum(localHotels$BED_2014)
(nbr[which(nbr$Buurt_code == neighbourhood),]$total_beds) <- bedCount
}
joined <- st_join(hotels,nbr)
for (neighbourhood in unique(joined$Buurt_code)){
localHotels <- joined[which(joined$Buurt_code == neighbourhood),]
bedCount <- sum(localHotels$BED_2014)
nbr[which(nbr$Buurt_code == neighbourhood),]$total_beds <- bedCount
}
for (neighbourhood in unique(joined$Buurt_code)){
localHotels <- joined[which(joined$Buurt_code == neighbourhood),]
bedCount <- sum(localHotels$BED_2014)
print(nbr[which(nbr$Buurt_code == neighbourhood),])
}
for (neighbourhood in unique(joined$Buurt_code)){
localHotels <- joined[which(joined$Buurt_code == neighbourhood),]
bedCount <- sum(localHotels$BED_2014)
print(bedCount)
}
for (neighbourhood in unique(joined$Buurt_code)){
localHotels <- joined[which(joined$Buurt_code == neighbourhood),]
bedCount <- sum(localHotels$BED_2014)
print(paste(neighbourhood,bedCount))
}
beds <- data.frame(matrix(ncol = 2, nrow = 0))
x <- c("Buurt_code", "Beds")
colnames(beds) <- x
?rbind
for (neighbourhood in unique(joined$Buurt_code)){
localHotels <- joined[which(joined$Buurt_code == neighbourhood),]
bedCount <- sum(localHotels$BED_2014)
rbind(beds, c(neighbourhood,bedCount))
}
beds
beds <- data.frame(matrix(ncol = 2, nrow = 0))
x <- c("Buurt_code", "Beds")
colnames(beds) <- x
for (neighbourhood in unique(joined$Buurt_code)){
localHotels <- joined[which(joined$Buurt_code == neighbourhood),]
bedCount <- sum(localHotels$BED_2014)
rbind(beds, c(neighbourhood,bedCount))
}
for (neighbourhood in unique(joined$Buurt_code)){
localHotels <- joined[which(joined$Buurt_code == neighbourhood),]
bedCount <- sum(localHotels$BED_2014)
beds <- rbind(beds, c(neighbourhood,bedCount))
}
beds
beds <- data.frame(matrix(ncol = 2, nrow = 0))
beds
x <- c("Buurt_code", "Beds")
colnames(beds) <- x
beds
matrix(c(neighbourhood,bedCount))
matrix(c(neighbourhood,bedCount),ncol=2)
beds <- data.frame(matrix(ncol = 2, nrow = 0))
x <- c("Buurt_code", "Beds")
colnames(beds) <- x
for (neighbourhood in unique(joined$Buurt_code)){
localHotels <- joined[which(joined$Buurt_code == neighbourhood),]
bedCount <- sum(localHotels$BED_2014)
plusbeds <- data.frame(matrix(c(neighbourhood,bedCount),ncol=2))
colnames(plusbeds) <- x
}
for (neighbourhood in unique(joined$Buurt_code)){
localHotels <- joined[which(joined$Buurt_code == neighbourhood),]
bedCount <- sum(localHotels$BED_2014)
plusbeds <- data.frame(matrix(c(neighbourhood,bedCount),ncol=2))
colnames(plusbeds) <- x
beds <- rbind(beds,plusbeds)
}
beds
?merge
merge(hotels,beds)
nbr <- merge(nbr,beds)
nbr
nbr <- geojsonio::geojson_read("data/GEBIED_BUURTEN.json",what = "sp")
?merge
nbr <- merge(nbr,beds,all=T)
nbr
# load in data
hotels <- read.csv('data/hotels_amsterdam.csv', stringsAsFactors = FALSE)
# Clean data
hotels <- hotels[1:nrow(hotels)-1,]
hotels[hotels=="P CORNELISZ HOOFTSTR"]<-"PIETER CORNELISZ HOOFTSTRAAT"
hotels[hotels=="PIETER JACOBSZOONDWARSSTRAAT"]<-"pieter jacobszdwarsstraat"
hotels[hotels=="PROVINCIALE WEG"]<-"provincialeweg"
hotels[hotels=="1054BV"]<-""
hotels[hotels=="1E C HUYGENSSTR"]<- "Eerste+Constantijn+Huygensstraat"
hotels[hotels=="103-105"]<- 103
hotels[hotels=="315-331"] <- 315
hotels[hotels=="387-390"] <- 387
nbr <- geojsonio::geojson_read("data/GEBIED_BUURTEN.json",what = "sp")
inhabs_raw <- read.csv('data/inwoners_amsterdam.csv',stringsAsFactors = FALSE)
inhabs <- inhabs_raw[3:(nrow(inhabs_raw)-2),]
inhabs$code <- substr(inhabs$X1.1a..Bevolking.buurten..1.januari.2014.2018, start=1, stop=4)
colnames(inhabs) <- c("neighbourhood","2014","2015", "2016", "2017", "2018_tot", "2018_men", "2018_wom", "Buurt_code")
inhabs$`2018_tot` <- replace(inhabs$`2018_tot`, inhabs$`2018_tot`=='-', 0)
inhabs$`2018_tot` <- as.numeric(inhabs$`2018_tot`)
nbr <- merge(nbr,inhabs)
nbr <- st_as_sf(nbr)
keeps <- c("Buurt_code","Buurt","Stadsdeel_code", "2018_tot","geometry")
nbr<- nbr[keeps]
plot(nbr)
# # Geolocate hotels
# for (row in 1:nrow(hotels)){
#   address <- paste(hotels[row,"STRAAT_2014"],hotels[row,"HUISID_2014"], hotels[row,"POSTCODE_2014"], "Amsterdam")
#   coordinates <- locateAddress(address)
#   as.numeric(levels(coordinates))
#   print(coordinates$lat)
#   hotels[row,"lat"] <- as.numeric(coordinates$lat)
#   print(hotels[row,"lat"])
#   hotels[row,"lon"] <- coordinates$lon
# }
#
# write.csv(hotels, 'intermediate/geo_hotels.csv')
hotels <- read.csv('intermediate/geo_hotels.csv', stringsAsFactors = FALSE)
hotels <- st_as_sf(hotels, coords = c('lon', 'lat'), crs = 4326, na.fail=F)
joined <- st_join(hotels,nbr)
beds <- data.frame(matrix(ncol = 2, nrow = 0))
x <- c("Buurt_code", "Beds")
colnames(beds) <- x
for (neighbourhood in unique(joined$Buurt_code)){
localHotels <- joined[which(joined$Buurt_code == neighbourhood),]
bedCount <- sum(localHotels$BED_2014)
plusbeds <- data.frame(matrix(c(neighbourhood,bedCount),ncol=2))
colnames(plusbeds) <- x
beds <- rbind(beds,plusbeds)
}
nbr <- merge(nbr,beds,all=T)
m <- leaflet() %>% setView(lng = 4.898940, lat = 52.382676, zoom = 11)
m %>% addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addPolygons(data = nbr,color = "#444444", weight = 0.4, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.2,
fillColor = "red",
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE), label = ~Buurt) %>%
addMarkers(data=hotels, popup=~ï..HOTELNAAM_2014)
nbr$bed_pressure <- nbr$Beds / nbr$`2018_tot`
nbr$bed_pressure <- as.numeric(nbr$Beds) / as.numeric(nbr$`2018_tot`)
nbr$bed_pressure <- as.numeric(nbr$Beds) / as.numeric(nbr$`2018_tot`)*100
class(nbr$Beds)
class(nbr$Beds[1])
nbr$Beds <- as.numeric(nbr$Beds)
class(nbr$Beds)
nbr$Beds <- as.numeric(nbr$Beds)
nbr$`2018_tot` <- as.numeric(nbr$`2018_tot`)
nbr <- merge(nbr,beds,all=T)
nbr$bed_pressure <- nbr$Beds / nbr$`2018_tot`
class(nbr$Beds)
nbr$Beds <- as.numeric(nbr$Beds)
nbr$Beds
class(nbr$Beds)
nbr$`2018_tot` <- as.numeric(nbr$`2018_tot`)
nbr <- merge(nbr,beds,all=T)
nbr <- merge(nbr,beds,all=T)
# load in data
hotels <- read.csv('data/hotels_amsterdam.csv', stringsAsFactors = FALSE)
# Clean data
hotels <- hotels[1:nrow(hotels)-1,]
hotels[hotels=="P CORNELISZ HOOFTSTR"]<-"PIETER CORNELISZ HOOFTSTRAAT"
hotels[hotels=="PIETER JACOBSZOONDWARSSTRAAT"]<-"pieter jacobszdwarsstraat"
hotels[hotels=="PROVINCIALE WEG"]<-"provincialeweg"
hotels[hotels=="1054BV"]<-""
hotels[hotels=="1E C HUYGENSSTR"]<- "Eerste+Constantijn+Huygensstraat"
hotels[hotels=="103-105"]<- 103
hotels[hotels=="315-331"] <- 315
hotels[hotels=="387-390"] <- 387
nbr <- geojsonio::geojson_read("data/GEBIED_BUURTEN.json",what = "sp")
inhabs_raw <- read.csv('data/inwoners_amsterdam.csv',stringsAsFactors = FALSE)
inhabs <- inhabs_raw[3:(nrow(inhabs_raw)-2),]
inhabs$code <- substr(inhabs$X1.1a..Bevolking.buurten..1.januari.2014.2018, start=1, stop=4)
colnames(inhabs) <- c("neighbourhood","2014","2015", "2016", "2017", "2018_tot", "2018_men", "2018_wom", "Buurt_code")
inhabs$`2018_tot` <- replace(inhabs$`2018_tot`, inhabs$`2018_tot`=='-', 0)
inhabs$`2018_tot` <- as.numeric(inhabs$`2018_tot`)
nbr <- merge(nbr,inhabs)
nbr <- st_as_sf(nbr)
keeps <- c("Buurt_code","Buurt","Stadsdeel_code", "2018_tot","geometry")
nbr<- nbr[keeps]
plot(nbr)
# # Geolocate hotels
# for (row in 1:nrow(hotels)){
#   address <- paste(hotels[row,"STRAAT_2014"],hotels[row,"HUISID_2014"], hotels[row,"POSTCODE_2014"], "Amsterdam")
#   coordinates <- locateAddress(address)
#   as.numeric(levels(coordinates))
#   print(coordinates$lat)
#   hotels[row,"lat"] <- as.numeric(coordinates$lat)
#   print(hotels[row,"lat"])
#   hotels[row,"lon"] <- coordinates$lon
# }
#
# write.csv(hotels, 'intermediate/geo_hotels.csv')
hotels <- read.csv('intermediate/geo_hotels.csv', stringsAsFactors = FALSE)
hotels <- st_as_sf(hotels, coords = c('lon', 'lat'), crs = 4326, na.fail=F)
joined <- st_join(hotels,nbr)
beds <- data.frame(matrix(ncol = 2, nrow = 0))
x <- c("Buurt_code", "Beds")
colnames(beds) <- x
for (neighbourhood in unique(joined$Buurt_code)){
localHotels <- joined[which(joined$Buurt_code == neighbourhood),]
bedCount <- sum(localHotels$BED_2014)
plusbeds <- data.frame(matrix(c(neighbourhood,bedCount),ncol=2))
colnames(plusbeds) <- x
beds <- rbind(beds,plusbeds)
}
nbr <- merge(nbr,beds,all=T)
nbr$Beds <- as.numeric(nbr$Beds)
nbr$`2018_tot` <- as.numeric(nbr$`2018_tot`)
nbr$bed_pressure <- nbr$Beds / nbr$`2018_tot`
scipen
?options
options(scipen = 999)
nbr$bed_pressure <- nbr$Beds / nbr$`2018_tot`
nbr$bed_pressure <- nbr$Beds / nbr$`2018_tot`*100
m <- leaflet() %>% setView(lng = 4.898940, lat = 52.382676, zoom = 11)
m %>% addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addPolygons(data = nbr$bed_pressure,color = "#444444", weight = 0.4, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.2,
fillColor = "red",
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE), label = ~Buurt) %>%
addMarkers(data=hotels, popup=~ï..HOTELNAAM_2014)
m <- leaflet() %>% setView(lng = 4.898940, lat = 52.382676, zoom = 11)
m %>% addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addPolygons(data = nbr,color = "#444444", weight = 0.4, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.2,
fillColor = ~colorQuantile("YlOrRd", bed_pressure)(bed_pressure),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE), label = ~Buurt) %>%
addMarkers(data=hotels, popup=~ï..HOTELNAAM_2014)
m <- leaflet() %>% setView(lng = 4.898940, lat = 52.382676, zoom = 11)
m %>% addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addPolygons(data = nbr,color = "#444444", weight = 0.4, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.2,
fillColor = ~colorQuantile("YlOrRd", bed_pressure),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE), label = ~Buurt) %>%
addMarkers(data=hotels, popup=~ï..HOTELNAAM_2014)
m <- leaflet() %>% setView(lng = 4.898940, lat = 52.382676, zoom = 11)
m %>% addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addPolygons(data = nbr,color = "#444444", weight = 0.4, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.2,
fillColor = "red",
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE), label = ~Buurt) %>%
addMarkers(data=hotels, popup=~ï..HOTELNAAM_2014)
m <- leaflet() %>% setView(lng = 4.898940, lat = 52.382676, zoom = 11)
m %>% addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addPolygons(data = nbr,color = "#444444", weight = 0.4, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.2,
fillColor = "red",
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE), label = ~Buurt) %>%
addMarkers(data=hotels, popup=~ï..HOTELNAAM_2014)
m %>% addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addPolygons(data = nbr,color = "#444444", weight = 0.4, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.2,
fillColor = "red",
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE), label = ~Buurt) %>%
addMarkers(data=hotels, popup=~ï..HOTELNAAM_2014)
# libraries and scripts
library(geojsonio)
library(sf)
library(leaflet)
source('scripts/addresslocator.R')
# load in data
hotels <- read.csv('data/hotels_amsterdam.csv', stringsAsFactors = FALSE)
# Clean data
hotels <- hotels[1:nrow(hotels)-1,]
hotels[hotels=="P CORNELISZ HOOFTSTR"]<-"PIETER CORNELISZ HOOFTSTRAAT"
hotels[hotels=="PIETER JACOBSZOONDWARSSTRAAT"]<-"pieter jacobszdwarsstraat"
hotels[hotels=="PROVINCIALE WEG"]<-"provincialeweg"
hotels[hotels=="1054BV"]<-""
hotels[hotels=="1E C HUYGENSSTR"]<- "Eerste+Constantijn+Huygensstraat"
hotels[hotels=="103-105"]<- 103
hotels[hotels=="315-331"] <- 315
hotels[hotels=="387-390"] <- 387
nbr <- geojsonio::geojson_read("data/GEBIED_BUURTEN.json",what = "sp")
inhabs_raw <- read.csv('data/inwoners_amsterdam.csv',stringsAsFactors = FALSE)
inhabs <- inhabs_raw[3:(nrow(inhabs_raw)-2),]
inhabs$code <- substr(inhabs$X1.1a..Bevolking.buurten..1.januari.2014.2018, start=1, stop=4)
colnames(inhabs) <- c("neighbourhood","2014","2015", "2016", "2017", "2018_tot", "2018_men", "2018_wom", "Buurt_code")
inhabs$`2018_tot` <- replace(inhabs$`2018_tot`, inhabs$`2018_tot`=='-', 0)
inhabs$`2018_tot` <- as.numeric(inhabs$`2018_tot`)
nbr <- merge(nbr,inhabs)
nbr <- st_as_sf(nbr)
keeps <- c("Buurt_code","Buurt","Stadsdeel_code", "2018_tot","geometry")
nbr<- nbr[keeps]
plot(nbr)
# # Geolocate hotels
# for (row in 1:nrow(hotels)){
#   address <- paste(hotels[row,"STRAAT_2014"],hotels[row,"HUISID_2014"], hotels[row,"POSTCODE_2014"], "Amsterdam")
#   coordinates <- locateAddress(address)
#   as.numeric(levels(coordinates))
#   print(coordinates$lat)
#   hotels[row,"lat"] <- as.numeric(coordinates$lat)
#   print(hotels[row,"lat"])
#   hotels[row,"lon"] <- coordinates$lon
# }
#
# write.csv(hotels, 'intermediate/geo_hotels.csv')
hotels <- read.csv('intermediate/geo_hotels.csv', stringsAsFactors = FALSE)
hotels <- st_as_sf(hotels, coords = c('lon', 'lat'), crs = 4326, na.fail=F)
joined <- st_join(hotels,nbr)
beds <- data.frame(matrix(ncol = 2, nrow = 0))
x <- c("Buurt_code", "Beds")
colnames(beds) <- x
for (neighbourhood in unique(joined$Buurt_code)){
localHotels <- joined[which(joined$Buurt_code == neighbourhood),]
bedCount <- sum(localHotels$BED_2014)
plusbeds <- data.frame(matrix(c(neighbourhood,bedCount),ncol=2))
colnames(plusbeds) <- x
beds <- rbind(beds,plusbeds)
}
nbr <- merge(nbr,beds,all=T)
nbr$Beds <- as.numeric(nbr$Beds)
nbr$`2018_tot` <- as.numeric(nbr$`2018_tot`)
options(scipen = 999)
nbr$bed_pressure <- nbr$Beds / nbr$`2018_tot`*100
m <- leaflet() %>% setView(lng = 4.898940, lat = 52.382676, zoom = 11)
m %>% addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addPolygons(data = nbr,color = "#444444", weight = 0.4, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.2,
fillColor = "red",
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE), label = ~Buurt) %>%
addMarkers(data=hotels, popup=~ï..HOTELNAAM_2014)
m <- leaflet() %>% setView(lng = 4.898940, lat = 52.382676, zoom = 11)
m %>% addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addPolygons(data = nbr,color = "#444444", weight = 0.4, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.2,
fillColor = "red",
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE), label = ~Buurt) %>%
addMarkers(data=hotels, popup=~ï..HOTELNAAM_2014)
class(nbr)
m %>% addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addPolygons(data = nbr,color = "#444444", weight = 0.4, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.2,
fillColor = "red",
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE), label = ~Buurt)
m <- leaflet() %>% setView(lng = 4.898940, lat = 52.382676, zoom = 11)
m %>% addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addPolygons(data = nbr,color = "#444444", weight = 0.4, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.2,
fillColor = "red",
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE), label = ~Buurt)
m %>% addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addPolygons(data = nbr)
m %>% addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addPolygons(data = nbr)
library(leaflet)
m %>% addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addPolygons(data = nbr)
m %>% addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addPolygons(data = nbr)
m <- leaflet() %>% setView(lng = 4.898940, lat = 52.382676, zoom = 11)
m %>% addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = "yellow",
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE))
m %>% addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addPolygons(data = nbr, color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = "yellow",
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE))
# main script for data analysis
# libraries and scripts
library(geojsonio)
library(sf)
library(leaflet)
source('scripts/addresslocator.R')
# load in data
hotels <- read.csv('data/hotels_amsterdam.csv', stringsAsFactors = FALSE)
# Clean data
hotels <- hotels[1:nrow(hotels)-1,]
hotels[hotels=="P CORNELISZ HOOFTSTR"]<-"PIETER CORNELISZ HOOFTSTRAAT"
hotels[hotels=="PIETER JACOBSZOONDWARSSTRAAT"]<-"pieter jacobszdwarsstraat"
hotels[hotels=="PROVINCIALE WEG"]<-"provincialeweg"
hotels[hotels=="1054BV"]<-""
hotels[hotels=="1E C HUYGENSSTR"]<- "Eerste+Constantijn+Huygensstraat"
hotels[hotels=="103-105"]<- 103
hotels[hotels=="315-331"] <- 315
hotels[hotels=="387-390"] <- 387
nbr <- geojsonio::geojson_read("data/GEBIED_BUURTEN.json",what = "sp")
inhabs_raw <- read.csv('data/inwoners_amsterdam.csv',stringsAsFactors = FALSE)
inhabs <- inhabs_raw[3:(nrow(inhabs_raw)-2),]
inhabs$code <- substr(inhabs$X1.1a..Bevolking.buurten..1.januari.2014.2018, start=1, stop=4)
colnames(inhabs) <- c("neighbourhood","2014","2015", "2016", "2017", "2018_tot", "2018_men", "2018_wom", "Buurt_code")
inhabs$`2018_tot` <- replace(inhabs$`2018_tot`, inhabs$`2018_tot`=='-', 0)
inhabs$`2018_tot` <- as.numeric(inhabs$`2018_tot`)
nbr <- merge(nbr,inhabs)
nbr <- st_as_sf(nbr)
keeps <- c("Buurt_code","Buurt","Stadsdeel_code", "2018_tot","geometry")
nbr<- nbr[keeps]
plot(nbr)
# # Geolocate hotels
# for (row in 1:nrow(hotels)){
#   address <- paste(hotels[row,"STRAAT_2014"],hotels[row,"HUISID_2014"], hotels[row,"POSTCODE_2014"], "Amsterdam")
#   coordinates <- locateAddress(address)
#   as.numeric(levels(coordinates))
#   print(coordinates$lat)
#   hotels[row,"lat"] <- as.numeric(coordinates$lat)
#   print(hotels[row,"lat"])
#   hotels[row,"lon"] <- coordinates$lon
# }
#
# write.csv(hotels, 'intermediate/geo_hotels.csv')
hotels <- read.csv('intermediate/geo_hotels.csv', stringsAsFactors = FALSE)
hotels <- st_as_sf(hotels, coords = c('lon', 'lat'), crs = 4326, na.fail=F)
joined <- st_join(hotels,nbr)
beds <- data.frame(matrix(ncol = 2, nrow = 0))
x <- c("Buurt_code", "Beds")
colnames(beds) <- x
for (neighbourhood in unique(joined$Buurt_code)){
localHotels <- joined[which(joined$Buurt_code == neighbourhood),]
bedCount <- sum(localHotels$BED_2014)
plusbeds <- data.frame(matrix(c(neighbourhood,bedCount),ncol=2))
colnames(plusbeds) <- x
beds <- rbind(beds,plusbeds)
}
nbr <- merge(nbr,beds,all=T)
nbr$Beds <- as.numeric(nbr$Beds)
nbr$`2018_tot` <- as.numeric(nbr$`2018_tot`)
options(scipen = 999)
nbr$bed_pressure <- nbr$Beds / nbr$`2018_tot`*100
m <- leaflet() %>% setView(lng = 4.898940, lat = 52.382676, zoom = 11)
m %>% addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addPolygons(data = nbr, color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = "yellow",
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE))
